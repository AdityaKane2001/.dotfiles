

" VimTeX
packadd vimtex
filetype plugin indent on
let g:vimtex_view_method = 'zathura'

" TermPDF split preview
" Inspired by and based on:
" https://github.com/camspiers/dotfiles
" 
" Expects `termpdf` to be recognizable and fetch the correct system paths
" Otherwise it will kill the new split upon launch
let g:vimtex_view_automatic = 0
" Compute `expected width`
" I don't want the pdf to take half of my screen because it's usually too much for it.
" This is just my messy little formula that just works out.
let termpdf_exp_width  = float2nr(float2nr(winheight(0) * 15) / 2)
let termpdf_curr_width = float2nr(float2nr(winwidth(0) * 8) / 2)
let g:termpdf_resize_init = - float2nr((termpdf_curr_width - termpdf_exp_width) / 18)
let g:termpdf_tab_prefix = 'tpdfv'
let g:termpdf_enabled = 1

function! TermPDFReset() abort
  call system('kitty @ resize-window --match title:' . g:termpdf_tab_prefix . b:vimtex.name . '.pdf -a reset')
endfunction

function! TermPDFResize(size) abort
  let g:termpdf_resize_init += a:size
  if a:size == 0
    call TermPDFReset()
    call system('kitty @ resize-window --match title:' . 
          \ g:termpdf_tab_prefix . b:vimtex.name . '.pdf -a horizontal -i ' . g:termpdf_resize_init)
  else
    call system('kitty @ resize-window --match title:' . 
          \ g:termpdf_tab_prefix . b:vimtex.name . '.pdf -a horizontal -i ' . a:size)
  endif
endfunction

function! TermPDFClose() abort
  call system('kitty @ close-window --match title:' . g:termpdf_tab_prefix . b:vimtex.name . '.pdf')
endfunction

function! TermPDF(status) abort

  if a:status
    call TermPDFClose()
    call system('kitty @ launch --keep_focus --copy_env --location=vsplit ' . 
          \ '--title ' . g:termpdf_tab_prefix  . b:vimtex.name . '.pdf ' . 
          \ 'termpdf ' .  b:vimtex.root . '/' . b:vimtex.name . '.pdf')
    call TermPDFResize(0)
  endif
endfunction

function! DisableTermPDF()
  call TermPDFClose()
  " let g:vimtex_view_general_callback = ''
  let g:termpdf_enabled = 0
  augroup VimtexTest
    autocmd!
  augroup end
endfunction

function! EnableTermPDF()
  " let g:vimtex_view_general_callback = 'TermPDF'
  let g:termpdf_enabled = 1
  augroup VimtexTest
    autocmd!
    "autocmd FileType tex :VimtexClean
    autocmd FileType tex :VimtexCompile
    autocmd! User VimtexEventCompileSuccess call TermPDF(1)
    autocmd! User VimtexEventCompileStopped call TermPDFClose()
    " autocmd! User VimtexEventCompileFailed call TermPDFClose()
  augroup end
endfunction

function! ToggleTermPDF()
  if g:termpdf_enabled
    call DisableTermPDF()
  else
    call EnableTermPDF()
    call TermPDF(1)
  endif
endfunction

" Enable by default
" call EnableTermPDF()

"" Allow toggling TermPDF
"map <leader>lp :call ToggleTermPDF()<cr>
"map <leader>l= :call TermPDFResize(10)<cr>
"map <leader>l- :call TermPDFResize(-10)<cr>


"" Back to VimTex
"" Disable matchparen because it slows stuff down
let g:vimtex_matchparen_enabled = 0
let loaded_matchparen = 1


let g:vimtex_compiler_latexmk = {
    \ 'build_dir' : '',
    \ 'callback' : 1,
    \ 'continuous' : 1,
    \ 'executable' : 'latexmk',
    \ 'hooks' : [],
    \ 'options' : [
    \   '-verbose',
    \   '-file-line-error',
    \   '-synctex=1',
    \ ],
      \}
